apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "kafka.fullname" . }}-configmap
  labels:
    {{- include "kafka.labels.standard" . | nindent 4 }}
data:
  server.properties: |+
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # see kafka.server.KafkaConfig for additional details and defaults
    ############################# Server upgrade #############################
    # This property enables kafka rolling upgrade without downtime.
    # Set it's value to the version you are upgrading from.
    # Once the cluster's behavior and performance has been verified, bump the protocol version set it target version
    inter.broker.protocol.version={{ .Values.config.interBrokerProtocolVersion }}

    ############################# Server Basics #############################

    # The id of the broker. This must be set to a unique integer for each broker.
    # To be set by startup script.
    #broker.id=0

    # Rack of the broker. This will be used in rack aware replication assignment for fault tolerance.
    # TBD
    #broker.rack=

    # Enable auto creation of topic on the server
    auto.create.topics.enable={{ .Values.config.autoCreateTopicsEnable }}

    # Switch to enable topic deletion or not.
    delete.topic.enable={{ .Values.config.deleteTopicEnable }}

    # Specify the final compression type for a given topic
    compression.type={{ .Values.config.compressionType }}

    # The largest record batch size allowed by Kafka.
    # This can be set per topic with the topic level max.message.bytes config.
    {{- if .Values.config.messageMaxBytes }}
    message.max.bytes={{ int .Values.config.messageMaxBytes }}
    {{- end }}

    # default replication factors for automatically created topics
    default.replication.factor={{ int .Values.config.defaultReplicationFactor }}

    # min.insync.replicas specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
    min.insync.replicas={{ int .Values.config.minInsyncReplicas }}

    ############################# Socket Server Settings #############################

    # The address the socket server listens on. It will get the value returned from
    # java.net.InetAddress.getCanonicalHostName() if not configured.
    #   FORMAT:
    #     listeners = listener_name://host_name:port
    #   EXAMPLE:
    #     listeners = PLAINTEXT://your.host.name:9092
    # To be set by startup script.
    #listeners=PLAINTEXT://:9092

    # Hostname and port the broker will advertise to producers and consumers. If not set,
    # it uses the value for "listeners" if configured.  Otherwise, it will use the value
    # returned from java.net.InetAddress.getCanonicalHostName().
    # To be set by startup script.
    #advertised.listeners=PLAINTEXT://your.host.name:9092

    # Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
    listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,{{ .Values.listeners.external.protocol }}:PLAINTEXT

    # The number of threads that the server uses for receiving requests from the network and sending responses to the network
    num.network.threads={{ int .Values.config.numNetworkThreads }}

    # The number of threads that the server uses for processing requests, which may include disk I/O
    num.io.threads={{ int .Values.config.numIoThreads }}

    # The send buffer (SO_SNDBUF) used by the socket server
    socket.send.buffer.bytes={{ int .Values.config.socketSendBufferBytes }}

    # The receive buffer (SO_RCVBUF) used by the socket server
    socket.receive.buffer.bytes={{ int .Values.config.socketReceiveBufferBytes }}

    # The maximum size of a request that the socket server will accept (protection against OOM)
    socket.request.max.bytes={{ int .Values.config.socketRequestMaxBytes }}

    # Lister for inter broker communication
    inter.broker.listener.name={{ .Values.config.interBrokerListenerName }}

    ############################# Log Basics #############################

    # A comma separated list of directories under which to store log files
    log.dirs={{ .Values.config.logDirs }}

    # The default number of log partitions per topic. More partitions allow greater
    # parallelism for consumption, but this will also result in more files across
    # the brokers.
    num.partitions={{ int .Values.config.numPartitions }}

    # The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
    # This value is recommended to be increased for installations with data dirs located in RAID array.
    num.recovery.threads.per.data.dir={{ int .Values.config.numRecoveryThreadsPerDataDir }}

    ############################# Internal Topic Settings  #############################
    # The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
    # For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
    offsets.topic.replication.factor={{ int .Values.config.offsetsTopicReplicationFactor }}
    transaction.state.log.replication.factor={{ int .Values.config.transactionStateLogReplicationFactor }}
    transaction.state.log.min.isr={{ int .Values.config.transactionStateLogMinIsr }}

    # After a consumer group loses all its consumers (i.e. becomes empty) its offsets will be kept for this retention period before getting discarded.
    offsets.retention.minutes={{ int .Values.config.offsetsRetentionMinutes }}

    ############################# Log Flush Policy #############################

    # Messages are immediately written to the filesystem but by default we only fsync() to sync
    # the OS cache lazily. The following configurations control the flush of data to disk.
    # There are a few important trade-offs here:
    #    1. Durability: Unflushed data may be lost if you are not using replication.
    #    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
    #    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
    # The settings below allow one to configure the flush policy to flush data after a period of time or
    # every N messages (or both). This can be done globally and overridden on a per-topic basis.

    # The number of messages to accept before forcing a flush of data to disk
    {{- if .Values.config.logFlushIntervalMessages }}
    log.flush.interval.messages={{ int .Values.config.logFlushIntervalMessages }}
    {{- end }}

    # The maximum amount of time a message can sit in a log before we force a flush
    {{- if .Values.config.logFlushIntervalMs }}
    log.flush.interval.ms={{ int .Values.config.logFlushIntervalMs }}
    {{- end }}

    ############################# Log Retention Policy #############################

    # The following configurations control the disposal of log segments. The policy can
    # be set to delete segments after a period of time, or after a given size has accumulated.
    # A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
    # from the end of the log.

    # The minimum age of a log file to be eligible for deletion due to age
    log.retention.hours={{ int .Values.config.logRetentionHours }}

    # A size-based retention policy for logs. Segments are pruned from the log unless the remaining
    # segments drop below log.retention.bytes. Functions independently of log.retention.hours.
    {{- if .Values.config.logRetentionBytes }}
    log.retention.bytes={{ int .Values.config.logRetentionBytes }}
    {{- end }}

    # The maximum time before a new log segment is rolled out (in milliseconds).
    {{- if .Values.config.logRollMs }}
    log.roll.ms={{ int .Values.config.logRollMs }}
    {{- end }}

    # The maximum size of a log segment file. When this size is reached a new log segment will be created.
    log.segment.bytes={{ int .Values.config.logSegmentBytes }}

    # The interval at which log segments are checked to see if they can be deleted according
    # to the retention policies
    log.retention.check.interval.ms={{ int .Values.config.logRetentionCheckIntervalMs }}

    ############################# Zookeeper #############################

    # Zookeeper connection string (see zookeeper docs for details).
    # This is a comma separated host:port pairs, each corresponding to a zk
    # server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
    # You can also append an optional chroot string to the urls to specify the
    # root directory for all kafka znodes.
    zookeeper.connect={{ template "kafka.zookeeper.connect" . }}

    # Timeout in ms for connecting to zookeeper
    zookeeper.connection.timeout.ms={{ int .Values.config.zookeeperConnectionTimeoutMs }}

    # Zookeeper session timeout
    zookeeper.session.timeout.ms={{ int .Values.config.zookeeperSessionTimeoutMs }}

    ############################# Group Coordinator Settings #############################

    # The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
    # The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
    # The default value for this is 3 seconds.
    # We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
    # However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
    group.initial.rebalance.delay.ms={{ int .Values.config.groupInitialRebalanceDelayMs }}

    ############################# Replication #############################

    # Number of fetcher threads used to replicate messages from a source broker.
    # Increasing this value can increase the degree of I/O parallelism in the follower broker.
    num.replica.fetchers={{ int .Values.config.numReplicaFetchers }}

    {{- if .Values.config.replicaFetchBackoffMs }}
    # The amount of time to sleep when fetch partition error occurs
    replica.fetch.backoff.ms={{ int .Values.config.replicaFetchBackoffMs }}
    {{- end }}

    {{- if .Values.config.replicaFetchMaxBytes }}
    # The number of bytes of messages to attempt to fetch for each partition
    replica.fetch.max.bytes={{ int .Values.config.replicaFetchMaxBytes }}
    {{- end }}

    {{- if .Values.config.replicaFetchMinBytes }}
    # Minimum bytes expected for each fetch response. If not enough bytes, wait up to replicaMaxWaitTimeMs
    replica.fetch.min.bytes={{ int .Values.config.replicaFetchMinBytes }}
    {{- end }}

    {{- if .Values.config.replicaFetchResponseMaxBytes }}
    # Maximum bytes expected for the entire fetch response
    replica.fetch.response.max.bytes={{ int .Values.config.replicaFetchResponseMaxBytes }}
    {{- end }}

    {{- if .Values.config.replicaFetchWaitMaxMs }}
    # max wait time for each fetcher request issued by follower replicas
    replica.fetch.wait.max.ms={{ int .Values.config.replicaFetchWaitMaxMs }}
    {{- end }}

    {{- if .Values.config.replicaHighWatermarkCheckpointIntervalMs }}
    # The frequency with which the high watermark is saved out to disk
    replica.high.watermark.checkpoint.interval.ms={{ int .Values.config.replicaHighWatermarkCheckpointIntervalMs }}
    {{- end }}

    {{- if .Values.config.replicaLagTimeMaxMs }}
    # If a follower hasn't sent any fetch requests or hasn't consumed up to the leaders log end offset for at least this time,
    # the leader will remove the follower from isr
    replica.lag.time.max.ms={{ int .Values.config.replicaLagTimeMaxMs }}
    {{- end }}

    {{- if .Values.config.replicaSocketReceiveBufferBytes }}
    # The socket receive buffer for network requests
    replica.socket.receive.buffer.bytes={{ int .Values.config.replicaSocketReceiveBufferBytes }}
    {{- end }}

    {{- if .Values.config.replicaSocketTimeoutMs }}
    # The socket timeout for network requests. Its value should be at least replica.fetch.wait.max.ms
    replica.socket.timeout.ms={{ int .Values.config.replicaSocketTimeoutMs }}
    {{- end }}

    {{- if .Values.config.replicationQuotaWindowNum }}
    # The number of samples to retain in memory for replication quotas
    replication.quota.window.num={{ int .Values.config.replicationQuotaWindowNum }}
    {{- end }}

    {{- if .Values.config.replicationQuotaWindowSizeSeconds }}
    # The time span of each sample for replication quotas
    replication.quota.window.size.seconds={{ int .Values.config.replicationQuotaWindowSizeSeconds }}
    {{- end }}

  log4j.properties: |+
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # Unspecified loggers and loggers with additivity=true output to server.log and stdout
    # Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise
    log4j.rootLogger=INFO, stdout, kafkaAppender

    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log
    log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log
    log4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log
    log4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log
    log4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log
    log4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log
    log4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    # Change the two lines below to adjust ZK client logging
    log4j.logger.org.I0Itec.zkclient.ZkClient=INFO
    log4j.logger.org.apache.zookeeper=INFO

    # Change the two lines below to adjust the general broker logging level (output to server.log and stdout)
    log4j.logger.kafka=INFO
    log4j.logger.org.apache.kafka=INFO

    # Change to DEBUG or TRACE to enable request logging
    log4j.logger.kafka.request.logger=WARN, requestAppender
    log4j.additivity.kafka.request.logger=false

    # Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output
    # related to the handling of requests
    #log4j.logger.kafka.network.Processor=TRACE, requestAppender
    #log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender
    #log4j.additivity.kafka.server.KafkaApis=false
    log4j.logger.kafka.network.RequestChannel$=WARN, requestAppender
    log4j.additivity.kafka.network.RequestChannel$=false

    log4j.logger.kafka.controller=TRACE, controllerAppender
    log4j.additivity.kafka.controller=false

    log4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender
    log4j.additivity.kafka.log.LogCleaner=false

    log4j.logger.state.change.logger=TRACE, stateChangeAppender
    log4j.additivity.state.change.logger=false

    # Access denials are logged at INFO level, change to DEBUG to also log allowed accesses
    log4j.logger.kafka.authorizer.logger=INFO, authorizerAppender
    log4j.additivity.kafka.authorizer.logger=false
